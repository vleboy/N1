namespace: 'round'

attrs: businessKey,parent,parentRole,parentSn,parentName,parentDisplayId,parentDisplayName,userId,userName,company,gameType,gameId,sourceIP,country,province,city,betCount,betAmount,winAmount,refundAmount,retAmount,winloseAmount,createdDate,createdWeek,createdMonth,createdAt
    
batchInsert:
    - replace into round({{ round.attrs }}) values
    - for:
        array: data
        sql: (:businessKey,:parent,:parentRole,:parentSn,:parentName,:parentDisplayId,:parentDisplayName,:userId,:userName,:company,:gameType,:gameId,:sourceIP,:country,:province,:city,:betCount,:betAmount,:winAmount,:refundAmount,:retAmount,:winloseAmount,:createdDate,:createdWeek,:createdMonth,:createdAt)
        seperator: ','

#查询时间段所有商户对应的流水
queryAmountMap:
    - select * from v_round

#查询所有商户的每日数据
queryDayData:
    - select parent,parentDisplayName,createdDate created,betCount,ABS(betAmount) betAmount,refundAmount,retAmount,winloseAmount from v_round_parent_createddate 

queryWeekData:
    - select parent,parentDisplayName,createdWeek created,betCount,ABS(betAmount) betAmount,refundAmount,retAmount,winloseAmount from v_round_parent_createdweek

queryMonthData:
    - select parent,parentDisplayName,createdMonth created,betCount,ABS(betAmount) betAmount,refundAmount,retAmount,winloseAmount from v_round_parent_createdmonth 


#查询所有游戏的每日数据
queryGameDayData:
    - select gameType,createdDate created,betCount,ABS(betAmount) betAmount,refundAmount,retAmount,winloseAmount from v_round_gametype_createddate 

queryGameWeekData:
    - select gameType,createdWeek created,betCount,ABS(betAmount) betAmount,refundAmount,retAmount,winloseAmount from v_round_gametype_createdweek

queryGameMonthData:
    - select gameType,createdMonth created,betCount,ABS(betAmount) betAmount,refundAmount,retAmount,winloseAmount from v_round_gametype_createdmonth 

#查询玩家统计数据
playerDayData:
    - select parent,parentDisplayName,createdDate created,playerCount from v_round_parent_playercount_createddate

playerWeekData:
    - select parent,parentDisplayName,createdWeek created,playerCount from v_round_parent_playercount_createdweek

playerMonthData:
    - select parent,parentDisplayName,createdMonth created,playerCount from v_round_parent_playercount_createdmonth

playerGameDayData:
    - select gameType,createdDate created,playerCount from v_round_gametype_playercount_createddate

playerGameWeekData:
    - select gameType,createdWeek created,playerCount from v_round_gametype_playercount_createdweek

playerGameMonthData:
    - select gameType,createdMonth created,playerCount from v_round_gametype_playercount_createdmonth

#查询商户某个游戏的统计数据
queryGameParentDayData:
    - select parent,parentDisplayName,gameType,createdDate created,betCount,ABS(betAmount) betAmount,refundAmount,retAmount,winloseAmount from v_round_parent_gametype_createddate where gameType=:gameType

queryGameParentWeekData:
    - select parent,parentDisplayName,gameType,createdWeek created,betCount,ABS(betAmount) betAmount,refundAmount,retAmount,winloseAmount from v_round_parent_gametype_createdweek where gameType=:gameType

queryGameParentMonthData:
    - select parent,parentDisplayName,gameType,createdMonth created,betCount,ABS(betAmount) betAmount,refundAmount,retAmount,winloseAmount from v_round_parent_gametype_createdmonth where gameType=:gameType

playerGameParentDayData:
    - select parent,parentDisplayName,createdDate created,playerCount from v_round_parent_gametype_playercount_createddate where gameType=:gameType

playerGameParentWeekData:
    - select parent,parentDisplayName,createdWeek created,playerCount from v_round_parent_gametype_playercount_createdweek where gameType=:gameType

playerGameParentMonthData:
    - select parent,parentDisplayName,createdMonth created,playerCount from v_round_parent_gametype_playercount_createdmonth where gameType=:gameType

playerCountPie: # 饼图-玩家人数
    - select count(c.userId) as num,c.gameType from 
    - (SELECT gameType,userId from round where createdAt between :startTime and :endTime 
    - if:
        test: :parent != null
        sql: and parent = :parent
    - if:
        test: :gameType != null
        sql: and gameType = :gameType
    - GROUP BY gameType,userId) as c 
    - GROUP BY c.gameType

handleAmountPie: # 饼图-金额汇总
    - SELECT
    # 判断统计类型
    - if:
        test: :method == 'betCount'
        sql: round(sum(betCount),2) as num,gameType
    - if:
        test: :method == 'betAmount'
        sql: round(sum(betAmount),2) as num,gameType
    - if:
        test: :method == 'retAmount'
        sql: round(sum(retAmount),2) as num,gameType
    - if:
        test: :method == 'refundAmount'
        sql: round(sum(refundAmount),2) as num,gameType
    - from round where createdAt between :startTime and :endTime
    # 条件参数
    - if:
        test: :parent != null
        sql: and parent = :parent
    - if:
        test: :gameType != null
        sql: and gameType = :gameType
    - GROUP BY gameType

playerCountGraph: # 时间段柱状图-玩家人数
    - SELECT t.hours,count(t.userId) count from
    - (select distinct(userId),FROM_UNIXTIME(createdAt/1000,:formatType) hours from round where createdAt between :startTime and :endTime
    - if:
        test: :gameType != null
        sql: and gameType = :gameType
    - if:
        test: :parent != null
        sql: and parent = :parent
    - ) as t
    - GROUP BY t.hours

handleAmountGraph: # 时间段柱状图-金额汇总
    - SELECT FROM_UNIXTIME(createdAt/1000,:formatType) hours,
    # 判断count与sum
    - if:
        test: :method == 'betCount'
        sql: round(sum(betCount),2) count
    - if:
        test: :method == 'betAmount'
        sql: round(sum(betAmount),2) count
    - if:
        test: :method == 'retAmount'
        sql: round(sum(retAmount),2) count
    - if:
        test: :method == 'refundAmount'
        sql: round(sum(refundAmount),2) count
    - if:
        test: :method == 'winloseAmount'
        sql: round(sum(winloseAmount),2) count
    - from round where createdAt between :startTime and :endTime
    # 判断是否使用gameType
    - if:
        test: :gameType != null
        sql: and gameType = :gameType
    - if:
        test: :parent != null
        sql: and parent = :parent
    - GROUP BY hours

playerCountDay: # 日报表-玩家人数
    - select count(userId) count,t.days from
    - (SELECT FROM_UNIXTIME(createdAt/1000,'%Y-%m-%d') days,userId from round where createdAt between :startTime and :endTime
    - if:
        test: :gameType != null
        sql: and gameType = :gameType
    - if:
        test: :parent != null
        sql: and parent = :parent
    - group by days,userId) as t
    - GROUP BY t.days ORDER BY t.days

handleAmountDay: # 日报表-金额汇总
    - SELECT FROM_UNIXTIME(createdAt/1000,'%Y-%m-%d') days,
    # 判断count与sum
     - if:
        test: :method == 'betCount'
        sql: round(sum(betCount),2) count
    - if:
        test: :method == 'betAmount'
        sql: round(sum(betAmount),2) count
    - if:
        test: :method == 'retAmount'
        sql: round(sum(retAmount),2) count
    - if:
        test: :method == 'refundAmount'
        sql: round(sum(refundAmount),2) count
    - if:
        test: :method == 'winloseAmount'
        sql: round(sum(winloseAmount),2) count
    - from round where createdAt between :startTime and :endTime
    # 判断是否使用gameType
    - if:
        test: :gameType != null
        sql: and gameType = :gameType
    - if:
        test: :parent != null
        sql: and parent = :parent
    - group by days ORDER BY days

mapPlayerCount: # 地图-玩家人数
    - select count(a.userId) as total,a.province from
    - (select distinct(userId),province from round where createdAt between :startTime and :endTime 
    - if:
        test: :queryFlag == 'province'
        sql: and country = '中国'
    - if:
        test: :queryFlag == 'country'
        sql: and country != '其他'
    - if:
        test: :gameType != null
        sql: and gameType = :gameType
    - if:
        test: :parent != null
        sql: and parent = :parent
    - ) as a
    - group by a.province

mapHandleAmount: # 地图-金额汇总
    - select
    # 判断count与sum
    - if:
        test: :method == 'betCount'
        sql: round(sum(betCount),2) as total,province
    - if:
        test: :method == 'betAmount'
        sql: round(sum(betAmount),2) as total,province
    - if:
        test: :method == 'retAmount'
        sql: round(sum(retAmount),2) as total,province
    - if:
        test: :method == 'refundAmount'
        sql: round(sum(refundAmount),2) as total,province
    - if:
        test: :method == 'winloseAmount'
        sql: round(sum(winloseAmount),2) as total,province
    - from round where createdAt between :startTime and :endTime 
    - if:
        test: :queryFlag == 'province'
        sql: and country = '中国'
    - if:
        test: :queryFlag == 'country'
        sql: and country != '其他'
    # 判断是否使用gameType
    - if:
        test: :gameType != null
        sql: and gameType = :gameType
    - if:
        test: :parent != null
        sql: and parent = :parent
    - group by province
